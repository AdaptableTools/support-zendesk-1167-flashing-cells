import {
  AdaptableOptions,
  BadgeStyle as TypeofBadgeStyle,
  FormatColumnState,
  PredefinedConfig,
} from '@adaptabletools/adaptable-react-aggrid';
import { Trade } from '#/business/rpsModel';
import { adaptableCommonOptions } from './adaptableCommonOptions';
import {
  timeDisplayFormat,
  dateTimeDisplayFormat,
  numberDisplayFormat,
  numberCalculatedColumnSettings,
  positiveNegativeBadgeStyle,
  buySellBadgeStyle,
} from './utils';

const NumberColumnIds = [
  'quantity',
  'price',
  'initialQuantity',
  'initialPrice',
  'tradeVersion',
  'notional',
  'marketPrice',
  'yield',
  'marketYield',
  'bpv',
  'pv01',
  'marketValue',
  'couponRate',
  'swapPayAmount',
  'swapRecAmount',
  'settlementAmount',
  'signedQuantity',
  'signedNotional',
  'cashNew',
  'cashSod',
  'sodMarketValue',
  'rate',
  'pnl',
  'dv01',
];

const applyBadgeStyle = (columnIds: string[], BadgeStyle: TypeofBadgeStyle) =>
  columnIds.map((ColumnId) => ({
    ColumnId,
    BadgeStyle,
    IncludeGroupedRows: false,
  }));

const StyledPositiveNegativeColumns = applyBadgeStyle(NumberColumnIds, positiveNegativeBadgeStyle);
const StyledBuySellColumns = applyBadgeStyle(['direction'], buySellBadgeStyle);

export const adaptableTradeOptions: AdaptableOptions<Trade> = {
  ...adaptableCommonOptions,
  adaptableId: 'RPS TRADE BLOTTER',
  predefinedConfig: {
    ...(adaptableCommonOptions.predefinedConfig as PredefinedConfig),
    Layout: {
      Revision: 101,
      CurrentLayout: 'Default',
      Layouts: [
        {
          Name: 'Default',
          Columns: [
            'status',
            'executionDate',
            'executionDate_1',
            'tradeId',
            'book',
            'country',
            'typology',
            'instrumentDescription',
            'maturityDate',
            'isinCode',
            'direction',
            'quantity',
            'dv01',
            'price',
            'yield',
            'pnl',
            'counterparty',
            'settlementDate',
            'marketPrice',
            'marketYield',
            'venue',
            'broker',
            'currency',
          ],
          ColumnSorts: [{ ColumnId: 'executionDate_1', SortOrder: 'Desc' }],
          ColumnWidthMap: {
            status: 43,
            executionDate: 78,
            executionDate_1: 58,
            tradeId: 76,
            book: 85,
            country: 42,
            typology: 76,
            instrumentDescription: 119,
            maturityDate: 79,
            isinCode: 88,
            direction: 42,
            quantity: 98,
            dv01: 66,
            price: 69,
            yield: 66,
            pnl: 83,
            counterparty: 100,
            settlementDate: 90,
            marketPrice: 85,
            marketYield: 80,
            venue: 90,
            broker: 110,
            currency: 48,
            key: 110,
            deliveryDate: 110,
            trader: 100,
            initialExecutionDate: 140,
            initialExecutionDate_1: 140,
            initialQuantity: 130,
            initialPrice: 80,
            initialCounterparty: 180,
            sourceSystem: 140,
            cdr: 100,
            productType: 90,
            venueOrderId: 90,
            nbTrades: 90,
            internalOrderId: 90,
            blockTradeId: 90,
            group: 90,
            contractId: 120,
            jsbId: 110,
            tradeDate: 110,
            inputDate: 120,
            modificationDate: 160,
            updatedAt: 120,
            tradeVersion: 140,
            notional: 130,
            priceType: 110,
            bpv: 100,
            pv01: 90,
            marketValue: 120,
            issueDate: 110,
            tenor: 110,
            instrumentLabel: 140,
            issuer: 180,
            issueLongDescription: 180,
            couponRate: 140,
            isCancelled: 120,
            isSod: 110,
            manualTrade: 120,
            isConfirmed: 120,
            isBlockTrade: 120,
            exchangeTicker: 140,
            ticker: 100,
            bloombergTicker: 160,
            market: 120,
            futCode: 110,
            futureType: 140,
            contractMaturity: 190,
            contractTicker: 140,
            counterpartyRicosId: 200,
            brokerRicosId: 200,
            rfqId: 200,
            swapPayCurrency: 100,
            swapPayAmount: 120,
            swapPayStartDate: 150,
            swapPayMaturityDate: 150,
            swapPayRateType: 150,
            swapPayIndex: 200,
            swapPayDayCount: 120,
            swapPayFrequency: 200,
            swapRecCurrency: 100,
            swapRecAmount: 120,
            swapRecStartDate: 150,
            swapRecMaturityDate: 150,
            swapRecRateType: 150,
            swapRecIndex: 200,
            swapRecDayCount: 120,
            swapRecFrequency: 200,
            inputDate_1: 120,
            modificationDate_1: 160,
            settlementAmount: 120,
            signedQuantity: 130,
            signedNotional: 130,
            cashNew: 130,
            cashSod: 130,
            sodMarketValue: 130,
            rate: 110,
            bookInternalOrderIdPrice: 36,
          },
        },
        {
          Name: 'Order Blotter',
          Columns: [
            'ag-Grid-AutoColumn',
            'status',
            'executionDate',
            'executionDate_1',
            'tradeId',
            'book',
            'country',
            'typology',
            'instrumentDescription',
            'maturityDate',
            'isinCode',
            'direction',
            'quantity',
            'dv01',
            'price',
            'yield',
            'pnl',
            'counterparty',
            'settlementDate',
            'marketPrice',
            'marketYield',
            'venue',
            'broker',
            'currency',
          ],
          ColumnSorts: [{ ColumnId: 'executionDate_1', SortOrder: 'Desc' }],
          ColumnFilters: [
            {
              ColumnId: 'typology',
              Predicate: {
                PredicateId: 'Values',
                Inputs: ['Bond', 'Bond Future', 'IR Future'],
              },
              Uuid: 'b2c5ea3f-1f3b-4334-b6a2-0b23399290ee',
              Source: 'Config',
            },
          ],
          ColumnWidthMap: {
            'ag-Grid-AutoColumn': 38,
            status: 44,
            executionDate: 83,
            executionDate_1: 65,
            tradeId: 79,
            book: 91,
            country: 35,
            typology: 79,
            instrumentDescription: 128,
            maturityDate: 87,
            isinCode: 94,
            direction: 45,
            quantity: 90,
            dv01: 62,
            price: 69,
            yield: 66,
            pnl: 74,
            counterparty: 98,
            settlementDate: 80,
            marketPrice: 92,
            marketYield: 99,
            venue: 90,
            broker: 94,
            currency: 54,
            key: 110,
            deliveryDate: 110,
            trader: 100,
            initialExecutionDate: 140,
            initialExecutionDate_1: 140,
            initialQuantity: 130,
            initialPrice: 80,
            initialCounterparty: 180,
            sourceSystem: 140,
            cdr: 100,
            productType: 90,
            venueOrderId: 90,
            nbTrades: 90,
            internalOrderId: 90,
            blockTradeId: 90,
            group: 90,
            contractId: 120,
            jsbId: 110,
            tradeDate: 110,
            inputDate: 120,
            modificationDate: 160,
            updatedAt: 120,
            tradeVersion: 140,
            notional: 130,
            priceType: 110,
            bpv: 100,
            pv01: 90,
            marketValue: 120,
            issueDate: 110,
            tenor: 110,
            instrumentLabel: 140,
            issuer: 180,
            issueLongDescription: 180,
            couponRate: 140,
            isCancelled: 120,
            isSod: 110,
            manualTrade: 120,
            isConfirmed: 120,
            isBlockTrade: 120,
            exchangeTicker: 140,
            ticker: 100,
            bloombergTicker: 160,
            market: 120,
            futCode: 110,
            futureType: 140,
            contractMaturity: 190,
            contractTicker: 140,
            counterpartyRicosId: 200,
            brokerRicosId: 200,
            rfqId: 200,
            swapPayCurrency: 100,
            swapPayAmount: 120,
            swapPayStartDate: 150,
            swapPayMaturityDate: 150,
            swapPayRateType: 150,
            swapPayIndex: 200,
            swapPayDayCount: 120,
            swapPayFrequency: 200,
            swapRecCurrency: 100,
            swapRecAmount: 120,
            swapRecStartDate: 150,
            swapRecMaturityDate: 150,
            swapRecRateType: 150,
            swapRecIndex: 200,
            swapRecDayCount: 120,
            swapRecFrequency: 200,
            inputDate_1: 120,
            modificationDate_1: 160,
            settlementAmount: 120,
            signedQuantity: 130,
            signedNotional: 130,
            cashNew: 130,
            cashSod: 130,
            sodMarketValue: 130,
            rate: 110,
            bookInternalOrderIdPrice: 36,
          },
          RowGroupedColumns: ['bookInternalOrderIdPrice'],
          AggregationColumns: {
            status: 'last',
            executionDate: 'first',
            executionDate_1: 'first',
            tradeId: 'first',
            book: 'first',
            country: 'first',
            typology: 'first',
            instrumentDescription: 'first',
            maturityDate: 'first',
            isinCode: 'first',
            direction: 'first',
            quantity: 'sum',
            dv01: 'sum',
            price: 'first',
            yield: 'first',
            pnl: 'sum',
            counterparty: 'first',
            settlementDate: 'first',
            marketPrice: 'first',
            marketYield: 'first',
            venue: 'first',
            broker: 'first',
            currency: 'first',
          },
          SuppressAggFuncInHeader: true,
        },
      ],
    },
    FormatColumn: {
      Revision: 101,
      FormatColumns: [
        {
          Scope: {
            ColumnIds: ['executionDate_1', 'initialExecutionDate_1', 'inputDate_1', 'modificationDate_1'],
          },
          DisplayFormat: timeDisplayFormat,
          IncludeGroupedRows: true,
          CellAlignment: 'Left',
        },
        {
          Scope: { ColumnIds: ['updatedAt'] },
          DisplayFormat: dateTimeDisplayFormat,
          IncludeGroupedRows: true,
          CellAlignment: 'Left',
        },
        {
          Scope: {
            ColumnIds: [
              'tradeDate',
              'issueDate',
              'swapPayStartDate',
              'swapPayMaturityDate',
              'swapRecStartDate',
              'swapRecMaturityDate',
            ],
          },
          DisplayFormat: {
            Formatter: 'DateFormatter',
            Options: {
              CustomDisplayFormats: ['displayInUTC'],
            },
          },
          IncludeGroupedRows: true,
          CellAlignment: 'Left',
        },
        {
          Scope: {
            ColumnIds: [
              'quantity',
              'initialQuantity',
              'tradeVersion',
              'notional',
              'swapPayAmount',
              'swapRecAmount',
              'signedQuantity',
              'signedNotional',
              'dv01',
            ],
          },
          DisplayFormat: numberDisplayFormat(0),
          IncludeGroupedRows: true,
          CellAlignment: 'Left',
        },
        {
          Scope: { ColumnIds: ['bpv', 'couponRate', 'pnl'] },
          DisplayFormat: numberDisplayFormat(2),
          IncludeGroupedRows: true,
          CellAlignment: 'Left',
        },
        {
          Scope: {
            ColumnIds: [
              'cashNew',
              'cashSod',
              'initialPrice',
              'marketPrice',
              'marketValue',
              'marketYield',
              'price',
              'settlementAmount',
              'sodMarketValue',
              'rate',
              'yield',
            ],
          },
          DisplayFormat: numberDisplayFormat(4),
          IncludeGroupedRows: true,
          CellAlignment: 'Left',
        },
        {
          Scope: {
            ColumnIds: ['status'],
          },
          IncludeGroupedRows: true,
          CellAlignment: 'Center',
        },
        // Combine with the FormatColumns from adaptableCommonOptions
        ...(((adaptableCommonOptions.predefinedConfig as PredefinedConfig).FormatColumn as FormatColumnState)
          .FormatColumns as []),
      ],
    },
    CalculatedColumn: {
      Revision: 104,
      CalculatedColumns: [
        {
          ColumnId: 'pnl',
          Query: {
            ScalarExpression:
              'CASE [typology] WHEN "TYPE1" THEN ([marketValue] - [sodMarketValue] + [cashNew] - [cashSod]) WHEN "TYPE2" THEN ([marketValue] - [sodMarketValue] + [cashNew] - [cashSod]) WHEN "TYPE3" THEN ([marketValue] - [sodMarketValue] + [cashNew] - [cashSod]) ELSE 0 END',
          },
          CalculatedColumnSettings: numberCalculatedColumnSettings,
          FriendlyName: 'P/L',
        },
        {
          ColumnId: 'dv01',
          Query: {
            ScalarExpression:
              'CASE [typology] WHEN "TYPE1" THEN ([signedNotional] * [pv01] / 100) - ([signedSodNotional] * [pv01] / 100) WHEN "TYPE2" THEN ([signedNotional] * [pv01] / 100) - ([signedSodNotional] * [pv01] / 100) WHEN "TYPE3" THEN ([signedNotional] * [pv01] * [marketPrice] * 25 / 1000000) - ([signedSodNotional] * [pv01] * [marketPrice] * 25 / 1000000) ELSE 0 END',
          },
          CalculatedColumnSettings: numberCalculatedColumnSettings,
          FriendlyName: 'DV01',
        },
        {
          ColumnId: 'bookInternalOrderIdPrice',
          Query: {
            ScalarExpression:
              '[group] IN ("LFUT","SFUT")? [book]+[internalOrderId]+[price]:[book]+[internalOrderId]+[venueOrderId]+[price]',
          },
          CalculatedColumnSettings: numberCalculatedColumnSettings,
          FriendlyName: 'ID',
        },
      ],
    },
    StyledColumn: {
      StyledColumns: [...StyledPositiveNegativeColumns, ...StyledBuySellColumns],
    },
  },
};
