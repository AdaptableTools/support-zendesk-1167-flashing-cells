import { EventId } from '#/business/rpsModel';

export type Trade = {
  book: string;
  bpv: number;
  currency: string;
  direction: string;
  instrumentDescription: string;
  isinCode: string;
  isCancelled: boolean;
  isSod: boolean;
  jsbId: string;
  key: string;
  marketPrice: number;
  price: number;
  priceType: string;
  productType: string;
  pv01: number;
  notional: number;
  sourceSystem: string;
  status: string;
  tradeDate: string;
  tradeId: string;
  contractId: string;
  tradeVersion: number;
  maturityDate: string;
  deliveryDate: string;
  issueDate: string;
  couponRate: number;
  ticker: string;
  bloombergTicker: string;
  issueLongDescription: string;
  trader: string;
  executionDate: string;
  inputDate: string;
  modificationDate: string;
  updatedAt: string;
  country: string;
  contractMaturity: string;
  contractTicker: string;
  exchangeTicker: string;
  futCode: string;
  futureType: string;
  counterparty: string;
  manualTrade: boolean;
  settlementDate: string;
  broker: string;
  quantity: number;
  tenor: string;
  isConfirmed: boolean;
  issuer: string;
  rfqId: string;
  counterpartyRicosId: string;
  cdr: string;
  market: string;
  swapPayCurrency: string;
  swapPayAmount: number;
  swapPayStartDate: string;
  swapPayMaturityDate: string;
  swapPayRateType: string;
  swapPayIndex: string;
  swapPayDayCount: string;
  swapPayFrequency: string;
  swapRecCurrency: string;
  swapRecAmount: number;
  swapRecStartDate: string;
  swapRecMaturityDate: string;
  swapRecRateType: string;
  swapRecIndex: string;
  swapRecDayCount: string;
  swapRecFrequency: string;
  instrumentLabel: string;
  typology: string;
  group: string;
  yield: number;
  initialCounterparty: string;
  initialPrice: number;
  initialQuantity: number;
  initialExecutionDate: string;
  venue: string;
  venueOrderId: string;
  blockTradeId: string;
  isBlockTrade: boolean;
  marketValue: number;
  settlementAmount: number;
  internalOrderId: string;
  nbTrades: number;
  brokerRicosId: string;
  marketYield: number;
  signedQuantity: number;
  signedNotional: number;
  sodMarketValue: number;
  cashNew: number;
  cashSod: number;
  rate: number;
  signedSodNotional: number;
};

export type TradeCalculatedColumns = {
  pnl: number;
  dv01: number;
};

export type TradesSnapshot = { trades: Trade[] } & EventId;

export type TradeToRemove = Pick<Trade, 'key'>;

export type TradeToUpdate = TradeToRemove & Partial<Trade>;
